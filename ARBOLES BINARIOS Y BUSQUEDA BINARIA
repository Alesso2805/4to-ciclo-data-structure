//////////////////////////////////EJEMPLO 1/////////////////////////

#include "ArbolB.hpp"
#include <stdlib.h>
#include <time.h>
#include <iostream>

using namespace std;

void imprimir(int e) {
	cout << " " << e;
}

int main() {
	//srand(time(0));
	ArbolB<int>* arbol = new ArbolB<int>(imprimir);
	/*
	for (int i = 0; i < 30; ++i) {
		arbol->insertar(rand() % 100);
	}*/

	//***Pruebas***
	//Ingreso manual
	//Caso 1:
	//arbol->insertar(6);
	//arbol->insertar(16);
	//arbol->insertar(26);

	//Caso 2:
	arbol->insertar(10);
	arbol->insertar(6);
	arbol->insertar(26);


	cout << "EnOrden";
	arbol->enOrden();
	cout << endl;

	cout << "PreOrden";
	arbol->preOrden();
	cout << endl;

	cout << "PostOrden";
	arbol->postOrden();
	cout << endl;

	cout << "Altura: " << arbol->altura() << endl;
	cout << "Cantidad: " << arbol->cantidad() << endl;

	cin.get();

	return 0;
}

//////////

#ifndef __ARBOLB_HPP__
#define __ARBOLB_HPP__

template <class T>
class Nodo {
public:
	T elemento;
	Nodo* izq;
	Nodo* der;
};

template <class T>
class ArbolB {
	Nodo<T>* raiz;
	void(*procesar)(T); //Puntero a funcion

private:
	bool _insertar(Nodo<T>*& nodo, T e) {
		if (nodo == nullptr) {
			nodo = new Nodo<T>();
			nodo->elemento = e;
		}
		else if (e < nodo->elemento) {
			return _insertar(nodo->izq, e);
		}
		else if (e >= nodo->elemento) {
			return _insertar(nodo->der, e);
		}
	}
	void _enOrden(Nodo<T>* nodo) {
		if (nodo == nullptr) return;
		_enOrden(nodo->izq);
		procesar(nodo->elemento);
		_enOrden(nodo->der);
	}

	void _preOrden(Nodo<T>* nodo) {
		if (nodo == nullptr) return;
		procesar(nodo->elemento);
		_preOrden(nodo->izq);
		_preOrden(nodo->der);
	}

	void _postOrden(Nodo<T>* nodo) {
		if (nodo == nullptr) return;
		_postOrden(nodo->izq);
		_postOrden(nodo->der);
		procesar(nodo->elemento);
	}
	bool _vacio() {
		return raiz == nullptr;
	}
	int _cantidad(Nodo<T>* nodo) {
		//La cantidad de nodos del árbol es:
		//	0 si es vacío
		//	1 + la cantidad de nodos por la izquierda + la cantidad de nodos por la derecha

		if (nodo==nullptr)
			return 0;
		else
		{
			int ci, cd;
			ci = _cantidad(nodo->izq);
			cd = _cantidad(nodo->der);
			return 1 + ci + cd;
		}

	}
	int _altura(Nodo<T>* nodo) {
		//La altura del árbol es:
		//	0 si es vacío
		//	la mayor de las alturas por la izquierda y por la derecha, las cuáles son 0 si son vacías ó 1 + la altura por la izq(o der) en caso contrario

		if (nodo==nullptr)
			return 0;
		else
		{
			int ai, ad;
			ai = 1 + _altura(nodo->izq);
			ad = 1 + _altura(nodo->der);
			return ai > ad ? ai : ad;			
		}
	}


public:
	ArbolB(void(*otroPunteroAFuncion)(T)) {
		this->procesar = otroPunteroAFuncion;
		raiz = nullptr;
	}
	bool insertar(T e) {
		return _insertar(raiz, e);
	}
	void enOrden() {
		_enOrden(raiz);
	}
	void preOrden() {
		_preOrden(raiz);
	}
	void postOrden() {
		_postOrden(raiz);
	}
	int cantidad() {
		return _cantidad(raiz);
	}
	int altura() {
		return _altura(raiz);
	}
};

#endif

/////////////////////////////////////EJEMPLO 2///////////////////////////

#include<iostream>
#include <vector>
using namespace std;
#include "BinarySearch.hpp"

int main() {
	vector<int> A = {1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16};
	BinarySearch<int> bs;

	//int resp = bs.binarySearch(A, 10);
	int resp = bs.binarySearchMejor(A, 10);

	cout << "Se encuentra en el indice: " << resp <<endl;

	cin.get();
	return 0;
}

///////////

#ifndef __BINARYSEARCH_HPP__
#define __BINARYSEARCH_HPP__
//#include <vector>
//using namespace std;
#define NOT_FOUND -1
template<typename Comparable>
class BinarySearch{
public:
	BinarySearch(){}

	int binarySearch(const vector<Comparable> &A, const Comparable x) {
		int low = 0, high = A.size() - 1;
		while (low<=high)
		{
			int mid = (low + high) / 2;
			if (A[mid] < x) {
				low = mid + 1;
			}
			else if (A[mid] > x) {
				high = mid - 1;
			}
			else {
				//Cuando low=high=mid
				//y A[mid] == x
				return mid;
			}
		}
}

	int binarySearchMejor(const vector<Comparable> &A, const Comparable x) {
		int low = 0;
		int high = A.size() - 1;
		int mid;
		while (low<high) {
			mid = (low + high) / 2;
			if (A[mid] < x) {
				low = mid + 1;
			}
			else {
				high = mid;
			}
		}
		return (low == high) && A[low] == x ? low : NOT_FOUND;
	}

};

#endif // !__BINARYSEARCH_HPP__

