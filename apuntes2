#include <bits/stdc++.h>
using namespace std;

struct pokemon{
    string name;
    int f;
    char type;
};

template < typename T>class List{

    struct node
    {
        T value;
        bool par;
        node *next;
        node*prev;
    };

    node *head =NULL, *tail = NULL;
    public:

    class Iterator{
        private:
        node * current;
        public:
        Iterator(node * a){
            current =a;
        }
        Iterator(){current = head;}
        
        Iterator& operator++(){ //++i
            if(current){
                current = current->next; // i++   ++i   i++-> ++i == 
            }
            return *this;
        }
        Iterator operator++(int) //i++        //i++   ++i
        {
            Iterator iterator = *this;
            ++*this;
            return iterator;
        }
        Iterator& operator=(node * a){
            this->current = a;
            return *this;
        }

        bool operator!=(const Iterator & it){
            return current!=it.current;
        }
        Iterator& operator+(int a){
            while(current and a){
                current = current->next;
                a--;
            }
            return *this;
        }

        node* operator*(){
            return current;
        }
        

    };

    Iterator begin() {return Iterator(head);}
    Iterator end() {return Iterator(nullptr);}

    void push_back(T a, bool b){
        node *temp = new node;
        *temp = {a, b,NULL, NULL};

        if(tail==NULL){
            head = tail =temp;
            return;
        }
        tail->next=temp;
        temp->prev= tail;
        tail = temp;
    }

    void sort(){
        if(head==NULL or head->next==NULL)return;//n^2

        node *temp = head->next;

        while(temp!=NULL){
            if(temp->prev->value.f > temp->value.f and temp->prev->par!=temp->par){
                swap(temp->prev->value, temp->value);
                swap(temp->prev->par, temp->par);
                node *temp1= temp->prev;

                while(temp1->prev!=NULL){
                    if(temp1->prev->value.f > temp1->value.f and temp1->prev->par!=temp1->par){
                        swap(temp1->prev->value, temp1->value);
                        swap(temp1->prev->par, temp1->par);
                    }
                    else break;
                    temp1 = temp1->prev;
                }
            }
            
            temp = temp->next;
        }
    }

    void printList(){
        node *temp = head;
        while(temp!=NULL){
            cout << temp->value.f << " ";
            temp =temp->next;
        }
    }

    void deleteNode(node*a){
        node *temp1 = a->prev;
        node *temp2 = a->next;
        delete a;
        if(temp1 ==NULL and temp2 ==NULL){head = tail =NULL;return;}
        if(temp1==NULL){
            head = temp2;
            temp2->prev=NULL;
            return;
        }
        if(temp2==NULL){
            tail=temp1;
            temp1->next=NULL;
            return;
        }
        temp1->next = temp2;
        temp2->prev = temp1;

    }


    

};


int main(){


    List<pokemon>l;
    
    l.push_back({"", 24, 't'}, 0);
    l.push_back({"", 2244, 't'}, 1);
    l.push_back({"", 224, 't'}, 0);
    l.push_back({"", 134, 't'}, 1);
    l.push_back({"", 2, 't'}, 0);

    l.printList();
    cout << endl;
    l.sort();
    l.printList();
}




//////////////////////////////////////////////////////////////////////////////////////////

#include <bits/stdc++.h>

using namespace std;

struct producto{
    string nombre;
    float precio;
    string codigo;

};

struct compra
{
    string persona_nombre;
    vector<producto> productos;
    string codigo_compra;
    
};


void CreateBill(compra C){
    ofstream file;
    string filename = C.persona_nombre + ".txt";

    
    file.open(filename, std::ios_base::app);


    file << "Recibo de comrpra: \n\n";
    float sum =0.0;

    for(auto e: C.productos){
        sum+=e.precio;
        file << e.nombre << "---------" << e.precio <<endl;
    }

    file << endl <<endl << "Total---------------" << sum;



    file <<endl <<endl <<endl << "compra en nombre de: " << C.persona_nombre << endl <<endl;;

    file.close();

    cout << "compra exitosa" << endl <<endl;;





}


int main(){

    producto a = {"gasesoa", 6.0, "j473754932"};
    producto b = {"arroz", 2.0, "j4756872"};
    producto c = {"fidos", 1.0, "j43554932"};//productos

    vector<producto> t ={a,b,c};




    compra r = {"juan", t, "hfiehiuonf3f"};//compra

    CreateBill(r);//recibo  

    CreateBill({"juan", {{"lappicer", 1.0, "934u53u5"}}, "dmuq34hd3fh"});

    t.clear();
}



//////////////////////////////////////////////////////////////////////////////////


#include <bits/stdc++.h>

using namespace std;

template<typename T> class Stack{

    struct node
    {
        T value;
        node *next;
        //node *prev;
    };
    int s=0;
    node*head;

    public:
    void push(T a){
        node * temp  = new node;
        *temp = {a, head};
        head= temp;
        s++;
    }
    void pop(){
        if(head==NULL) return;
        node *temp = head;
        head = head->next;
        delete temp;
        s--;
    }
    T front(){return head->value;}

    int size(){return s;}

};



int main(){

    string a, b;
    cin>>a>>b;

    Stack<char>s;
    for(int i=0; i<a.size(); i++){
        if(a[i]!='#') s.push(a[i]);
        else s.pop();
    }
    a="";
    while(s.size()){
        a = s.front()+a;
        s.pop();
    }

    for(int i=0;i<b.size(); i++){
        if(b[i]!='#') s.push(b[i]);
        else s.pop();
    }
    b="";
    while(s.size()){
        b = s.front() + b;++
        s.pop();
    }

    cout << (a==b? "YES": "NO") << endl;

    cout << a << " " << b;
}

//////////////////////////////////////////////////////////////////////////////////

#include <bits/stdc++.h>

using namespace std;


template<typename T> class Stack{

    struct node
    {
        T value;
        node *next;
    };
    int s=0;
    node*head;//incializa,ps

    public:
    void push(T a){ //inserta elemnto al principio
        node * temp  = new node;
        *temp = {a, head};
        head= temp;
        s++;
    }
    void pop(){ //eliminma primer elemento
        if(head==NULL) return;
        node *temp = head;
        head = head->next;
        delete temp;
        s--;
    }
    T front(){return head->value;} //retorna el primer elemnto

    int size(){return s;} // retorna el tamanano del stack

};

string solve(string a){ //procesar el string
    Stack<char>s;
    //process

    for(int i=0; i<a.size(); i++){
        if(a[i]!='#') s.push(a[i]);//si no es '#' insertamos el elemento
        else s.pop(); // si es '#' eliminamos el ultimo elemnto ingresado
    }

    //formateamos
    a="";

    //reconstruccion
    while(s.size()){
        a = s.front()+a;//concatenamos a la izquierda
        s.pop();//eliminamos el primer elemento del stack
    }

    return a;//devolcemos el string 

}

int main(){

    string a, b;
    cin>>a>>b;
    a= solve(a);//proceso dle string
    b = solve(b);//proceso dle string
    cout << (a==b? "YES": "NO") << endl; //verificacion

    cout << a << " " << b;

}

////////////////////////////////////////////////////////////////////////////////////////

#include <bits/stdc++.h>
using namespace std;

int main(){
    int n;cin >>n;
    vector<int>arr;
    for(int i=0; i<n; i++){
        int x;cin>>x;
        arr.push_back(x);
    }//ingreso de datos

    for(int i=1; i<n; i++){//iteramos entre todos los elementos
        //iteracion a la derecha
        if(arr[i-1]>arr[i]){ //anomalia incorrecto
            swap(arr[i-1],arr[i]);//resueve en el instante

            for(auto e: arr)cout << e << " ";//imprimir el arreglo
            cout << endl;

            //iteracion a la izquierda
            for(int j =i-1; j>0; j--){//reubicamos nuevo elemtno añadido
                if(arr[j-1]>arr[j]){
                    swap(arr[j], arr[j-1]);
                    for(auto e: arr)cout << e << " ";//imprimir el arreglo
                    cout << endl;
                }
            }
        }
    }
}

//////////////////////////////////////////////////////////////////////////////////////////////////

#include <bits/stdc++.h>
using namespace std;

int main(){
    int n;cin >>n;//2
    vector<int>arr;//1
    for(int i=0; i<n; i++){//2 + n * (3 + 1+1+1)
        int x;cin>>x;
        arr.push_back(x);
    }//ingreso de datos

    for(int i=1; i<n; i++){//iteramos entre todos los elementos 2+ (n-1) * (3 + 1+2 + 4 +n*(2 + 2) +1+ 2 + i* (3 + 1 +2 + 4 + n(2+2) + 1))    n^3
        //iteracion a la derecha
        if(arr[i-1]>arr[i]){ //anomalia incorrecto
            swap(arr[i-1],arr[i]);//resueve en el instante // 4acciones

            for(auto e: arr)cout << e << " ";//imprimir el arreglo
            cout << endl;

            //iteracion a la izquierda
            for(int j =i-1; j>0; j--){//reubicamos nuevo elemtno añadido
                if(arr[j-1]>arr[j]){
                    swap(arr[j], arr[j-1]);
                    for(auto e: arr)cout << e << " ";//imprimir el arreglo
                    cout << endl;
                }
            }
        }
    }

    //n^3
}

//1 + 2 +2 + n * (3 + 1+1+1) + 2+ (n-1) * (3 + 1+2 + 4 +n*(2 + 2) +1+ 2 + i* (3 + 1 +2 + 4 + n(2+2) + 1))

////////////////////////////////////////////////////////////////////////////////////////////////////
#include <bits/stdc++.h>
using namespace std;

struct pokemon{
    string name;
    int f;
    char type;
};

template < typename T>class List{

    struct node
    {
        T value;
        bool par;
        node *next;
        node*prev;
    };

    node *head =NULL, *tail = NULL;
    public:

    class Iterator{
        private:
        node * current;
        public:
        Iterator(node * a){
            current =a;
        }
        Iterator(){current = head;}
        
        Iterator& operator++(){ //++i
            if(current){
                current = current->next; // i++   ++i   i++-> ++i == 
            }
            return *this;
        }
        Iterator operator++(int) //i++        //i++   ++i
        {
            Iterator iterator = *this;
            ++*this;
            return iterator;
        }
        Iterator& operator=(node * a){
            this->current = a;
            return *this;
        }

        bool operator!=(const Iterator & it){
            return current!=it.current;
        }
        Iterator& operator+(int a){
            while(current and a){
                current = current->next;
                a--;
            }
            return *this;
        }

        node* operator*(){
            return current;
        }
        

    };

    Iterator begin() {return Iterator(head);}
    Iterator end() {return Iterator(nullptr);}

    void push_back(T a, bool b){
        node *temp = new node;
        *temp = {a, b,NULL, NULL};

        if(tail==NULL){
            head = tail =temp;
            return;
        }
        tail->next=temp;
        temp->prev= tail;
        tail = temp;
    }

    void sort(){
        if(head==NULL or head->next==NULL)return;//n^2

        node *temp = head->next;

        while(temp!=NULL){
            if(temp->prev->value.f > temp->value.f and temp->prev->par!=temp->par){
                swap(temp->prev->value, temp->value);
                swap(temp->prev->par, temp->par);
                node *temp1= temp->prev;

                while(temp1->prev!=NULL){
                    if(temp1->prev->value.f > temp1->value.f and temp1->prev->par!=temp1->par){
                        swap(temp1->prev->value, temp1->value);
                        swap(temp1->prev->par, temp1->par);
                    }
                    else break;
                    temp1 = temp1->prev;
                }
            }
            
            temp = temp->next;
        }
    }

    void printList(){
        node *temp = head;
        while(temp!=NULL){
            cout << temp->value.f << " ";
            temp =temp->next;
        }
    }

    void deleteNode(node*a){
        node *temp1 = a->prev;
        node *temp2 = a->next;
        delete a;
        if(temp1 ==NULL and temp2 ==NULL){head = tail =NULL;return;}
        if(temp1==NULL){
            head = temp2;
            temp2->prev=NULL;
            return;
        }
        if(temp2==NULL){
            tail=temp1;
            temp1->next=NULL;
            return;
        }
        temp1->next = temp2;
        temp2->prev = temp1;

    }


    

};


int main(){


    List<pokemon>l;
    
    l.push_back({"", 24, 't'}, 0);
    l.push_back({"", 2244, 't'}, 1);
    l.push_back({"", 224, 't'}, 0);
    l.push_back({"", 134, 't'}, 1);
    l.push_back({"", 2, 't'}, 0);

    l.printList();
    cout << endl;
    l.sort();
    l.printList();
}

//////////////////////////////////////////////////////////////////////////////////
#include <bits/stdc++.h>
using namespace std;
struct persona
{
    string dni;
    int edad;
    char sexo;
    int monto;
    string celular;
    int pos;
    bool operator>(const persona aux){
        return edad > aux.edad;
    }

};
struct node
{
    persona value;
    node *next;
    node *prev;
    bool operator>(const node aux){
        return value > aux.value;
    }
};

class Queue{
    int s=0;
    node * head=NULL, *tail=NULL;
    public:

    void push_back(persona a){
        node*temp= new node;
        *temp = {a, NULL, NULL};
        if(tail==NULL) head=tail=temp;

        temp->prev=tail;
        tail->next=temp;
        tail=temp;
        s++;
    }

    void pop(){
        if(!head) return;
        if(s==1){delete head; head=tail=NULL;s--; return;}
        s--;
        node *temp = head;
        head= head->next;
        delete temp;
    }

    persona front(){return head->value;}
    int size(){return s;}

    void print(){
        node*temp = head;
        while(temp!=NULL){
            cout << temp->value.dni << " ";
            temp = temp->next;
        }
        cout << endl;
    }
};

class List{
    int s=0;
    node *head= NULL, *tail=NULL;

    public:
    List(int n){
        srand(time(0));
        for(int i=0;i<n; i++){
            node *temp = new node;
            string dni="";
            string celular="9";
            for(int i=0;i<8; i++) {dni+= (char)(rand()%10 + '0'); celular+=(char)(rand()%10+'0');}
            *temp = {{dni, rand()%21 + 60, (rand()%2? 'M':'F'), 0,celular, i}, NULL, NULL };       
            if(i==0)head=tail=temp;
            else{       
            temp->prev=tail;
            tail->next=temp;
            tail=temp;
            }
            
        }
    }

    void insert(persona a){//n
        node *temp = new node;
        *temp = {a, NULL, NULL};
        if(head==NULL) {head=temp;return;}//si no hay nada
        if(head->value.pos > a.pos){//en el princpio
            temp->next=head;
            head->prev=temp;
            head=temp;
            return;
        }

        node*it = head;
        while(it->next!=NULL){
            if(a.pos < it->next->value.pos) break;//buscamos
            it = it->next;
        }
        if(it->next==NULL){//al final de la lista
            temp->prev=it;
            it->next=temp;
            tail=temp;
            return;
        }

        node*temp1 = it->next;
        temp->prev=it;//en medio de la lista
        it->next =temp;
        temp1->prev=temp;
        temp->next=temp1;
    }

    persona Delete(int pos){
        if(pos==0){
            node *temp= head;
            (head->next)->prev=NULL;
            persona a= head->value;
            head=head->next;
            delete temp;
            return a;
        }
        node *temp=head;
        pos--;
        while(temp->next!=NULL and pos){
            temp=temp->next;
            pos--;
        }
        if(temp->next==NULL)return {NULL};


        node*temp1 = temp->next->next;
        node*el = temp->next;
        persona a = el->value;

        if(temp1==NULL){
            temp->next=NULL;
        }
        else{
            temp->next=temp1;
            temp1->prev=temp;
        }
        delete el;
        return a;
    }

    void sort(){
        if(head==NULL or head->next==NULL) return;

        node*temp = head->next;

        while(temp!=NULL){
            if(temp->prev->value.edad > temp->value.edad){ //temp->prev > temp
                swap(temp->value, temp->prev->value);

                node *temp1 = temp->prev;
                while(temp1->prev!=NULL){
                    if(temp1->prev->value.edad> temp1->value.edad){
                        swap(temp1->value, temp1->prev->value);
                    }
                    temp1=temp1->prev;
                }
            }
            temp= temp->next;
        }

    }
    void print(){
        node*temp = head;
        while(temp!=NULL){
            cout << temp->value.edad << " ";
            temp = temp->next;
        }
        cout << endl;
    }
    void printreversed(){
        node*temp = tail;;
        while(temp!=NULL){
            cout << temp->value.edad << " ";
            temp = temp->prev;
        }
        cout << endl;
    }


};



int main(){

    List vecinos(10);
    Queue banco1;
    Queue banco2;
    Queue banco3;
    vecinos.print();
    banco1.push_back(vecinos.Delete(3));
    banco1.push_back(vecinos.Delete(0));
    vecinos.print();
    banco1.push_back(vecinos.Delete(4));
    vecinos.print();
    

    while(banco1.size()){
        vecinos.insert(banco1.front());banco1.pop();
    }
    vecinos.print();

}
