///////////////////////////////CLASE////////////////////////////////

#pragma once
#include <functional>

using namespace std;

typedef unsigned int uint;

template <typename T,T NADA=0>
class Lista {
	struct Nodo;
	typedef function<int(T, T)> Comp;

	Nodo* ini;
	uint lon; //numero de elementos de la lista
	Comp comparar; //lambda crterio de comparacion
public:
	Lista():ini(nullptr),lon(0), comparar([](T a, T b)
		{return a - b; }){}
	Lista(Comp comparar): ini(nullptr), lon(0),
		comparar(comparar){}
	~Lista();

	uint longitud();
	bool esVacia();

	void agregaInicial(T elem);
	void agregaPos(T elem, uint pos);
	void agregaFinal(T elem);

	void modificarInicial(T elem);
	void modificarPos(T elem, uint pos);
	void modificarFinal(T elem);
	
	void eliminaInicial();
	void eliminaPos(uint pos);
	void eliminaFinal();

	T obtenerInicial();
	T obtenerPos(uint pos);
	T obtenerFinal();
	T buscar(T elem);
};

//IMPLEMENTAR CLASE

template<typename T,T NADA>
struct Lista<T, NADA>::Nodo {
	T elem;//puntero
	Nodo* sig;//puntero apunta al siguiente nodo
	Nodo(T elem = NADA, Nodo* sig = nullptr):elem(elem),
		sig(sig){}
};

template<typename T,T NADA>
Lista<T, NADA>::~Lista() {
	Nodo* aux = ini;
	while (aux != nullptr) {
		aux = ini;
		ini = ini->sig;
		delete aux;
	}
}

template<typename T,T NADA>
uint Lista<T, NADA>::longitud() {
	return lon;
}

template<typename T, T NADA>
bool Lista<T, NADA>::esVacia() {
	return lon == 0;
}

template<typename T, T NADA>
void Lista<T, NADA>::agregaInicial(T elem) {
	Nodo* nuevo = new Nodo(elem, ini);
	if (nuevo != nullptr) {
		ini = nuevo;
		lon++;
	}
}
template<typename T, T NADA>
void Lista<T, NADA>::agregaPos(T elem, uint pos) {
	if (pos > lon) return;
	if (pos == 0) agregaInicial(elem);
	else {
		Nodo* aux = ini;
		for (int i = 1; i < pos; i++) {//5
			aux = aux->sig;
		}
		Nodo* nuevo = new Nodo(elem, aux->sig);
			if (nuevo != nullptr) {
				aux->sig = nuevo;
				lon++;
			}
	}
}

template<typename T, T NADA>
void Lista<T, NADA>::agregaFinal(T elem) {
	agregaPos(elem, lon);
}

template<typename T, T NADA>
void Lista<T, NADA>::modificarInicial(T elem) {
	if (lon > 0)
		ini->elem = elem;
}

template<typename T, T NADA>
void Lista<T, NADA>::modificarPos(T elem, uint pos) {
	if (pos >= 0 && pos < lon) {
		Nodo* aux = ini;
		for (int i = 0; i < pos; i++) {
			aux = aux->sig;
		}
		aux->elem = elem;
	}
}

template<typename T, T NADA>
void Lista<T, NADA>::modificarFinal(T elem) {
	modificarPos(elem, lon - 1);
}

template<typename T, T NADA>
void Lista<T, NADA>::eliminaInicial() {
	if (lon > 0) {
		Nodo* aux = ini;
		ini = ini->sig;
		delete aux;
		lon--;
	}
}

template <typename T, T NADA>
void Lista<T, NADA>::eliminaPos(uint pos) {

}
template <typename T, T NADA>
void Lista<T, NADA>::eliminaFinal() {

}

template<typename T, T NADA>
T Lista<T, NADA>::obtenerInicial() {
	return obtenerPos(0);
}

template<typename T, T NADA>
T Lista<T, NADA>::obtenerPos(uint pos) {
	if (pos >= 0 && pos < lon) {
		Nodo* aux = ini;
		for (int i = 0; i < pos; i++)
			aux = aux->sig;
		return aux->elem;
	} 
	else return NADA;
}

template<typename T, T NADA>
T Lista<T, NADA>::obtenerFinal(){
	return obtenerPos(lon - 1);
}

template<typename T, T NADA>
T Lista<T, NADA>::buscar(T elem) {
	Nodo* aux = ini;
	while (aux != nullptr) {
		if (comparar(aux->elem, elem) == 0) {
			return aux->elem;
		}
		aux = aux->sig;
	}
	return NADA;
}




///////////////////////////////////////MAIN/////////////////////////////////


#include "pch.h"
#include "lista.h"
#include <iostream>
using namespace std;

int main(){
    Lista<int>* lst = new Lista<int>();
    lst->agregaInicial(50);
    lst->agregaInicial(40);
    lst->agregaInicial(30);
    lst->agregaPos(10,0);
    lst->agregaPos(20, 1);
    lst->agregaPos(60, 5);
    lst->agregaPos(70, 6);
    lst->agregaPos(80, 8);
    for (int i = 0; i < lst->longitud(); i++) {
        cout << lst->obtenerPos(i) << endl;
    }
    cout << lst->longitud() << endl;
    cout << lst->obtenerInicial() << endl;
    cout << lst->obtenerPos(0) << endl;
    cout << lst->obtenerPos(1) << endl;
    cout << lst->obtenerPos(3) << endl;
    cout << lst->obtenerPos(5) << endl;
    cout << lst->obtenerPos(6) << endl;
    cout << lst->obtenerPos(7) << endl;
    cout << lst->obtenerPos(10) << endl;
    cout << lst->obtenerFinal() << endl;
    cout << lst->buscar(40) << endl;
    return 0;
}

